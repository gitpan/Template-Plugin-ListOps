This tests list operations:

Print a list (a a c b)                 : a a c b
  joined with (:)                      : a:a:c:b
  unique applied (a c b)               : a c b
  from data (A A C B)                  : A A C B
List with undef (A undef Z)            : A  Z
  and compacted                        : A Z
Union (duplicates) (a a c b a c d d e) : a a c b a c d d e
  uniqued                              : a c b d e
  alternate uniqued call               : a c b d e
Difference (unique) of two lists (b)   : b
  alternate call                       : b
  removing only single instances (a b) : a b
Intersection (unique) of lists (a b)   : a b
  alternate call                       : a b
  (duplicates) version (a a b)         : a a b
Symmetric difference (unique) (c)      : c
  alternate call                       : c
  (duplicates) version (c a)           : c a
At (a c)                               : a c
Sorted list (a a b c)                  : a a b c
  alternate call                       : a a b c
  reversed                             : c b a a
  numerical sort                       : -5 7 10 15
  reversed                             : 15 10 7 -5
  ips sorted                           : 10.227.208.3 10.227.208.42 128.227.208.63 128.227.208.75
  dates sorted                         : Dec 31 1999 May 31 2000 Jul 4 2000 Jan 3 2001
  reversed                             : Jan 3 2001 Jul 4 2000 May 31 2000 Dec 31 1999
Testing first and last (a e)           : a e
  and shift (a c)                      : a c
  and pop (e d)                        : e d
Testing unshift value (a m)            : a m
        unshift values (a b m)         : a b m
        unshift list (a a c b m)       : a a c b m
Testing push value (m z)               : m z
        push values (m y z)            : m y z
        push list (m a a c b)          : m a a c b
Testing minalph (a)                    : a
        maxalph (e)                    : e
        min (-5)                       : -5
        max (15)                       : 15
Testing impose (append) (a_x z_x)      : a_x z_x
        alternate                      : a_x z_x
        prepend (x_a x_z)              : x_a x_z
Testing reverse (b c a a)              : b c a a
Testing rotate (ftol) (c d a b)        : c d a b
        alternate                      : c d a b
        (ltof) (b c d a)               : b c d a
Count (2)                              : 2
Delete (b c)                           : b c
Delete (a unique)                      : b c
Delete (a duplicates)                  : b a c
Testing is_equal (0)                   : 0
                 (0)                   : 0
                 (0)                   : 0
                 (1)                   : 1
                 (1)                   : 1
                 (1)                   : 1
                 (1)                   : 1
                 (1)                   : 1
                 (0)                   : 0
                 (1)                   : 1
                 (1)                   : 1
                 (1)                   : 1
Chaining (c b)                         : c b
Clear                                  :
Fill ()                                :    
     (x x x x)                         : x x x x
     (a b x x)                         : a b x x
     (a b x c)                         : a b x c
     (a b x x x)                       : a b x x x
Splice ()                              :
       (a)                             : a
       (a c)                           : a c
       (a x c)                         : a x c
       (a x y c)                       : a x y c
       (a x y c)                       : a x y c
Index (0)                              : 0
      ()                               : -1
Rindex (2)                             : 2
       ()                              : -1
Set (a x a c)                          : a x a c